

### **Example: Basic Read/Write Interface**

---

#### **Step 1: Define the Interface**

```systemverilog
interface bus_if;
    logic        clk;
    logic        rst_n;
    logic [7:0]  addr;
    logic [7:0]  wdata;
    logic        write_en;
    logic [7:0]  rdata;
endinterface
```
- This interface groups common bus signals: address, write data, read data, control signals.

---

#### **Step 2: Design Module Using the Interface**

```systemverilog
module simple_memory (bus_if bus);
    
    logic [7:0] mem [0:255]; // 256 x 8-bit memory

    always_ff @(posedge bus.clk or negedge bus.rst_n) begin
        if (!bus.rst_n)
            bus.rdata <= 8'h00;
        else if (bus.write_en)
            mem[bus.addr] <= bus.wdata;
        else
            bus.rdata <= mem[bus.addr];
    end

endmodule
```
- Notice: Instead of declaring individual ports (`addr`, `wdata`, etc.), we use the **interface `bus`** directly.

---

#### **Step 3: Testbench Using the Interface**

```systemverilog
module tb;

    bus_if bus(); // Instantiate the interface

    // Instantiate DUT and connect interface
    simple_memory dut (.bus(bus));

    // Clock generation
    initial begin
        bus.clk = 0;
        forever #5 bus.clk = ~bus.clk;
    end

    initial begin
        bus.rst_n = 0;
        bus.write_en = 0;
        bus.addr = 0;
        bus.wdata = 0;

        #12;
        bus.rst_n = 1; // Release reset

        // Write 0xAA to address 10
        bus.addr = 8'd10;
        bus.wdata = 8'hAA;
        bus.write_en = 1;
        #10 bus.write_en = 0;

        // Read from address 10
        bus.addr = 8'd10;
        #10;

        $display("Read Data at Address 10 = %h", bus.rdata);

        $finish;
    end

endmodule
```

---

### **Expected Output**

When you run this simulation, you should see:

```
Read Data at Address 10 = AA
```

---

### **What This Example Shows**
- **`bus_if`** groups the clock, reset, address, data, and control signals.
- **Design** and **testbench** access signals using the interface.
- **Connections are clean**: instead of multiple ports, **only one `bus`** port is connected.
- Makes testbenches **more modular and readable**.
